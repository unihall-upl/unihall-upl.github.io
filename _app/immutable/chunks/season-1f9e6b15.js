import{A as c}from"./index-5d7a0d4f.js";const i=[{season:"2025",stats:[{stage:"league",played:!1,date:"05/04/2025",time:"15:00",clubs:["MA","JK"],home:0,away:0,goals:[]},{stage:"league",played:!1,date:"05/04/2025",time:"15:00",clubs:["BL","DEC"],home:0,away:0,goals:[]},{stage:"league",played:!1,date:"05/04/2025",time:"16:00",clubs:["BL","MA"],home:0,away:0,goals:[]},{stage:"league",played:!1,date:"05/04/2025",time:"16:00",clubs:["DEC","JK"],home:0,away:0,goals:[]},{stage:"league",played:!1,date:"26/04/2025",time:"15:00",clubs:["DEC","MA"],home:0,away:0,goals:[]},{stage:"league",played:!1,date:"26/04/2025",time:"15:00",clubs:["JK","BL"],home:0,away:0,goals:[]},{stage:"third-fourth",played:!1,date:"26/04/2025",time:"16:00",clubs:["TBC","TBC"],home:0,away:0,goals:[]},{stage:"final",played:!1,date:"26/04/2025",time:"16:00",clubs:["TBC","TBC"],home:0,away:0,goals:[]}]}],f=c("0"),p=c(),y=c(),n=c(),w=c(),h=c();let l=i;n.set([...l[0].stats].slice(-1));f.subscribe(r=>{let t=r;isNaN(t)?(l=[{season:"All Time",stats:[...i].reverse().map(({stats:s})=>s).flat()}],t=0):(t=parseInt(r),l=i),p.set(l[t]);function o(s){return{position:0,played:0,points:0,won:0,drawn:0,lost:0,gd:0}}let a={};l[t].stats.forEach(s=>{a[s.clubs[0]]===void 0&&s.clubs[0]!="TBC"&&(a[s.clubs[0]]=o(s.clubs[0])),a[s.clubs[1]]===void 0&&s.clubs[0]!="TBC"&&(a[s.clubs[1]]=o(s.clubs[1])),s.played&&s.stage=="league"&&(s.home>s.away?(a[s.clubs[0]].won+=1,a[s.clubs[1]].lost+=1,a[s.clubs[0]].points+=3):s.away>s.home?(a[s.clubs[1]].won+=1,a[s.clubs[0]].lost+=1,a[s.clubs[1]].points+=3):(a[s.clubs[0]].drawn+=1,a[s.clubs[1]].drawn+=1,a[s.clubs[0]].points+=1,a[s.clubs[1]].points+=1),a[s.clubs[0]].gd+=s.home-s.away,a[s.clubs[1]].gd+=s.away-s.home,a[s.clubs[0]].played+=1,a[s.clubs[1]].played+=1)}),a=Object.fromEntries(Object.entries(a).sort((s,e)=>e[1].points==s[1].points?e[1].gd-s[1].gd:e[1].points-s[1].points));let b=1;for(let[s,e]of Object.entries(a))e.position=b,b++;y.set(a);function g(s){return Object.entries(s).sort(([,e],[,m])=>m-e)}let u={};l[t].stats.forEach(s=>{s.goals.forEach(e=>{e in u?u[e]+=1:u[e]=1})}),w.set(g(u)),h.set([...l[t].stats])});export{p as c,w as g,h as m,y as t};
